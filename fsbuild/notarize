#!/usr/bin/env python3
# This file is automatically generated by fs-package

import os
import subprocess
import sys
import time
import xml.etree.ElementTree as ET

package = {}
with open("PACKAGE.FS", "r") as f:
    for line in f:
        try:
            key, value = line.strip().split("=", 1)
            package[key] = value
        except ValueError:
            pass
package_name_pretty = package["PACKAGE_NAME_PRETTY"]
bundle_id = package["PACKAGE_MACOS_BUNDLE_ID"]
app = package_name_pretty + ".app"
arch = "x86-64"  # FIXME

apple_id_user = os.environ.get("NOTARIZATION_USERNAME", "")
itc_provider = os.environ.get("NOTARIZATION_PROVIDER", "")


def shell(cmd):
    print(cmd)
    return subprocess.run(
        cmd, shell=True, check=True, stdout=subprocess.PIPE).stdout.decode("UTF-8")


def main():
    if sys.platform != "darwin":
        print("Skipping notarize step (Not a macOS build)")
        return
    app_dir = f"fsbuild/_build/{package_name_pretty}/macOS/{arch}"
    app_path = f"{app_dir}/{app}"
    shell("rm -f fsbuild/_build/notarize.zip")
    zip = "../../../notarize.zip"
    shell(f'cd {app_dir} && ditto -c -k --keepParent "{app}" "{zip}"')
    result = shell(
        "xcrun altool --notarize-app -t osx "
        "-f fsbuild/_build/notarize.zip "
        "--primary-bundle-id {bundle_id} "
        "-u {apple_id_user} "
        "-p @env:NOTARIZATION_PASSWORD "
        "-itc_provider {itc_provider} "
        "--output-format xml".format(
            bundle_id=bundle_id,
            apple_id_user=apple_id_user,
            itc_provider=itc_provider,
        )
    )

    print(result)
    root = ET.fromstring(result)
    dict = root.find("dict")
    print(dict)
    request_uuid = dict.find("dict").find("string").text
    print(request_uuid)

    for i in range(60):
        time.sleep(10.0)
        result = shell(
            "xcrun altool --notarization-info {} "
            "-u {} -p @env:NOTARIZATION_PASSWORD "
            "-itc_provider {} --output-format xml".format(
                request_uuid, apple_id_user, itc_provider
            )
        )
        if "<string>success</string>" in result:
            break
        elif "<string>in progress</string>" in result:
            print("in progress...")
            continue
        else:
            print(result)
            raise Exception("...")

    print('xcrun stapler staple "{}"'.format(app_path))
    assert os.system('xcrun stapler staple "{}"'.format(app_path)) == 0


if __name__ == "__main__":
    main()
