#!/bin/sh
set -e

PACKAGE=portmidi-217
CHECKSUM=08e9a892bd80bdb1115213fb72dc29a7bf2ff108b378180586aa65f3cfd42e0f
REVISION=5

# Depends on libasound (deb: libasound2-dev) on Linux. Maybe this should be
# considered a system library and not built/included.

. fsdeps/dep.sh

python3 fsdeps/download.py \
https://downloads.sourceforge.net/project/portmedia/portmidi/\
217/portmidi-src-217.zip \
sha256:$CHECKSUM

rm -Rf fsdeps/_build && mkdir fsdeps/_build && cd fsdeps/_build
unzip ../_sources/portmidi-src-217.zip
cd portmidi

find . -name *.c -exec dos2unix \{\} \;
find . -name *.h -exec dos2unix \{\} \;
find . -name CMakeLists.txt -exec dos2unix \{\} \;

patch -p1 <<EOF
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4919b78..c329001 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -4,6 +4,10 @@
 
 cmake_minimum_required(VERSION 2.6)
 
+include(GNUInstallDirs)
+
+set(CMAKE_CACHEFILE_DIR _build)
+
 if(UNIX)
   # allow user to set Release or Debug
   set(CMAKE_BUILD_TYPE Release CACHE STRING 
@@ -36,7 +40,7 @@ set(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO "" CACHE INTERNAL "Unused")
 set(CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO "" CACHE INTERNAL "Unused")
 set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "" CACHE INTERNAL "Unused")
 
-set(CMAKE_OSX_ARCHITECTURES i386 ppc x86_64 CACHE STRING "change to needed architecture for a smaller library" FORCE)
+set(CMAKE_OSX_ARCHITECTURES x86_64 CACHE STRING "change to needed architecture for a smaller library" FORCE)
 
 PROJECT(portmidi)
 
@@ -68,10 +72,9 @@ endif(UNIX)
 include_directories(pm_common porttime)
 add_subdirectory(pm_common)
 
-add_subdirectory(pm_test)
-
 add_subdirectory(pm_dylib)
 
+# add_subdirectory(porttime)
+
 # Cannot figure out how to make an xcode Java application with CMake
-add_subdirectory(pm_java)
 
diff --git a/pm_common/CMakeLists.txt b/pm_common/CMakeLists.txt
index e171047..99fc15e 100644
--- a/pm_common/CMakeLists.txt
+++ b/pm_common/CMakeLists.txt
@@ -21,13 +21,6 @@ else(APPLE OR WIN32)
   set(LINUX_FLAGS "-DPMALSA")
 endif(APPLE OR WIN32)
 
-if(APPLE)
-  set(CMAKE_OSX_SYSROOT /Developer/SDKs/MacOSX10.5.sdk CACHE 
-      PATH "-isysroot parameter for compiler" FORCE)
-  set(CMAKE_C_FLAGS "-mmacosx-version-min=10.5" CACHE 
-      STRING "needed in conjunction with CMAKE_OSX_SYSROOT" FORCE)
-endif(APPLE)
-
 macro(prepend_path RESULT PATH)
   set(\${RESULT})
   foreach(FILE \${ARGN})
@@ -66,19 +59,11 @@ if(UNIX)
     set(JAVA_INCLUDE_PATHS \${JAVAVM_LIB}/Headers)
     message(STATUS "SYSROOT: " \${CMAKE_OSX_SYSROOT})
   else(APPLE)
-    # LINUX settings...
-    include(FindJNI)
-    message(STATUS "JAVA_JVM_LIB_PATH is " \${JAVA_JVM_LIB_PATH})
-    message(STATUS "JAVA_INCLUDE_PATH is " \${JAVA_INCLUDE_PATH})
-    message(STATUS "JAVA_INCLUDE_PATH2 is " \${JAVA_INCLUDE_PATH2})
-    message(STATUS "JAVA_JVM_LIBRARY is " \${JAVA_JVM_LIBRARY})
-    set(JAVA_INCLUDE_PATHS \${JAVA_INCLUDE_PATH} \${JAVA_INCLUDE_PATH2})
-    # libjvm.so is found relative to JAVA_INCLUDE_PATH:
-    set(JAVAVM_LIB \${JAVA_JVM_LIBRARY}/libjvm.so)
+#    # LINUX settings...
 
     set(LINUXSRC pmlinuxalsa pmlinux finddefault)
     prepend_path(LIBSRC ../pm_linux/ \${LINUXSRC})
-    list(APPEND LIBSRC ../porttime/ptlinux)
+    #list(APPEND LIBSRC ../porttime/ptlinux)
 
     set(PM_NEEDED_LIBS pthread asound)
   endif(APPLE)
@@ -88,10 +73,6 @@ else(UNIX)
     # /MD is multithread DLL, /MT is multithread. Change to static:
     include(../pm_win/static.cmake)
     
-    include(FindJNI)
-
-    set(JAVA_INCLUDE_PATHS \${JAVA_INCLUDE_PATH} \${JAVA_INCLUDE_PATH2})
-    # message(STATUS "JAVA_INCLUDE_PATHS: " \${JAVA_INCLUDE_PATHS})
 
     set(WINSRC pmwin pmwinmm)
     prepend_path(LIBSRC ../pm_win/ \${WINSRC})
@@ -104,25 +85,30 @@ set(JNI_EXTRA_LIBS \${PM_NEEDED_LIBS} \${JAVA_JVM_LIBRARY})
 # this completes the list of library sources by adding shared code
 list(APPEND LIBSRC pmutil portmidi)
 
-# now add the shared files to make the complete list of library sources
-add_library(portmidi-static \${LIBSRC})
-set_target_properties(portmidi-static PROPERTIES OUTPUT_NAME "portmidi_s")
+## now add the shared files to make the complete list of library sources
+add_library(portmidi-static STATIC \${LIBSRC})
+set_target_properties(portmidi-static PROPERTIES OUTPUT_NAME "portmidi")
 target_link_libraries(portmidi-static \${PM_NEEDED_LIBS})
-
-# define the jni library
-include_directories(\${JAVA_INCLUDE_PATHS})
-
-set(JNISRC \${LIBSRC} ../pm_java/pmjni/pmjni.c)
-add_library(pmjni SHARED \${JNISRC})
-target_link_libraries(pmjni \${JNI_EXTRA_LIBS})
-set_target_properties(pmjni PROPERTIES EXECUTABLE_EXTENSION "jnilib")
-
+#
+## define the jni library
+#include_directories(\${JAVA_INCLUDE_PATHS})
+#
+#set(JNISRC \${LIBSRC} ../pm_java/pmjni/pmjni.c)
+#add_library(pmjni SHARED \${JNISRC})
+#target_link_libraries(pmjni \${JNI_EXTRA_LIBS})
+#set_target_properties(pmjni PROPERTIES EXECUTABLE_EXTENSION "jnilib")
+#
 # install the libraries (Linux and Mac OS X command line)
 if(UNIX)
-  INSTALL(TARGETS portmidi-static pmjni
-    LIBRARY DESTINATION /usr/local/lib
-    ARCHIVE DESTINATION /usr/local/lib)
+  INSTALL(TARGETS portmidi-static
+    LIBRARY DESTINATION \${CMAKE_INSTALL_LIBDIR}
+    ARCHIVE DESTINATION \${CMAKE_INSTALL_LIBDIR})
 # .h files installed by pm_dylib/CMakeLists.txt, so don't need them here
 #  INSTALL(FILES portmidi.h ../porttime/porttime.h
 #    DESTINATION /usr/local/include)
+else(UNIX)
+  INSTALL(TARGETS portmidi-static
+    RUNTIME DESTINATION bin
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib)
 endif(UNIX)
diff --git a/pm_common/portmidi.c b/pm_common/portmidi.c
index b716170..9a469b1 100755
--- a/pm_common/portmidi.c
+++ b/pm_common/portmidi.c
@@ -9,7 +9,6 @@
 #include "porttime.h"
 #include "pmutil.h"
 #include "pminternal.h"
-#include <assert.h>
 
 #define MIDI_CLOCK      0xf8
 #define MIDI_ACTIVE     0xfe
@@ -293,8 +292,8 @@ PMEXPORT const char *Pm_GetErrorText( PmError errnum ) {
  * The error will always be in the global pm_hosterror_text.
  */
 PMEXPORT void Pm_GetHostErrorText(char * msg, unsigned int len) {
-    assert(msg);
-    assert(len > 0);
+    if (!msg) return;
+    if (len <= 0) return;
     if (pm_hosterror) {
         strncpy(msg, (char *) pm_hosterror_text, len);
         pm_hosterror = FALSE;
@@ -1016,7 +1015,7 @@ void pm_read_short(PmInternal *midi, PmEvent *event)
 { 
     int status;
     /* arg checking */
-    assert(midi != NULL);
+    if (!midi) return;
     /* midi filtering is applied here */
     status = Pm_MessageStatus(event->message);
     if (!pm_status_filtered(status, midi->filters)
@@ -1058,7 +1057,7 @@ unsigned int pm_read_bytes(PmInternal *midi, const unsigned char *data,
     int i = 0; /* index into data, must not be unsigned (!) */
     PmEvent event;
     event.timestamp = timestamp;
-    assert(midi);
+    if (!midi) return 0;
     /* note that since buffers may not have multiples of 4 bytes,
      * pm_read_bytes may be called in the middle of an outgoing
      * 4-byte PortMidi message. sysex_in_progress indicates that
diff --git a/pm_dylib/CMakeLists.txt b/pm_dylib/CMakeLists.txt
index f693dd6..9bdb96b 100644
--- a/pm_dylib/CMakeLists.txt
+++ b/pm_dylib/CMakeLists.txt
@@ -115,13 +115,21 @@ list(APPEND LIBSRC \${SHARED_PATHS})
 
 add_library(portmidi-dynamic SHARED \${LIBSRC})
 set_target_properties(portmidi-dynamic PROPERTIES OUTPUT_NAME "portmidi")
+set_target_properties(portmidi-dynamic PROPERTIES VERSION "0.0.0" SOVERSION "0")
 target_link_libraries(portmidi-dynamic \${PM_NEEDED_LIBS})
 
 # install the libraries (Linux and Mac OS X command line)
 if(UNIX)
   INSTALL(TARGETS portmidi-dynamic
-    LIBRARY DESTINATION /usr/local/lib
-    ARCHIVE DESTINATION /usr/local/lib)
+    LIBRARY DESTINATION \${CMAKE_INSTALL_LIBDIR}
+    ARCHIVE DESTINATION \${CMAKE_INSTALL_LIBDIR})
   INSTALL(FILES ../pm_common/portmidi.h ../porttime/porttime.h
-    DESTINATION /usr/local/include)
+    DESTINATION include)
+else(UNIX)
+  INSTALL(TARGETS portmidi-dynamic
+    RUNTIME DESTINATION bin
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib)
+  INSTALL(FILES ../pm_common/portmidi.h ../porttime/porttime.h
+    DESTINATION include)
 endif(UNIX)
diff --git a/pm_java/CMakeLists.txt b/pm_java/CMakeLists.txt
index a350620..b491bbd 100644
--- a/pm_java/CMakeLists.txt
+++ b/pm_java/CMakeLists.txt
@@ -1,6 +1,7 @@
 # pm_java
 
 if(UNIX)
+else (UNIX)
   if(APPLE)
     # java not dealt with in CMake -- see pm_mac/pm_mac.xcodeproj
   else(APPLE)
diff --git a/pm_linux/finddefault.c b/pm_linux/finddefault.c
index 6340316..8dbe338 100644
--- a/pm_linux/finddefault.c
+++ b/pm_linux/finddefault.c
@@ -5,10 +5,13 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
+#include <ctype.h>
 #include "portmidi.h"
 
 #define STRING_MAX 256
 
+extern int pm_find_default_device(char *pattern, int is_input);
+
 /* skip over spaces, return first non-space */
 void skip_spaces(FILE *inf)
 {
@@ -26,7 +29,6 @@ int match_string(FILE *inf, char *s)
 } 
 
 
-/* 
 /* Parse preference files, find default device, search devices --
  */
 PmDeviceID find_default_device(char *path, int input, PmDeviceID id)
@@ -80,7 +82,7 @@ PmDeviceID find_default_device(char *path, int input, PmDeviceID id)
             pref_str[i] = c;
         }
         if (i == STRING_MAX) continue; // value too long, ignore
-        pref_str[i] == 0;
+        //pref_str[i] == 0;
         i = pm_find_default_device(pref_str, input);
         if (i != pmNoDevice) {
             id = i;
diff --git a/pm_linux/pmlinux.c b/pm_linux/pmlinux.c
index 5105ecd..5e18629 100755
--- a/pm_linux/pmlinux.c
+++ b/pm_linux/pmlinux.c
@@ -26,6 +26,8 @@
 PmDeviceID pm_default_input_device_id = -1;
 PmDeviceID pm_default_output_device_id = -1;
 
+extern int find_default_device(char *path, int input, PmDeviceID id);
+
 void pm_init()
 {
     /* Note: it is not an error for PMALSA to fail to initialize. 
diff --git a/pm_linux/pmlinuxalsa.c b/pm_linux/pmlinuxalsa.c
index 8e85cfe..1788a2d 100755
--- a/pm_linux/pmlinuxalsa.c
+++ b/pm_linux/pmlinuxalsa.c
@@ -32,9 +32,9 @@
 #endif
 
 /* to store client/port in the device descriptor */
-#define MAKE_DESCRIPTOR(client, port) ((void*)(((client) << 8) | (port)))
-#define GET_DESCRIPTOR_CLIENT(info) ((((int)(info)) >> 8) & 0xff)
-#define GET_DESCRIPTOR_PORT(info) (((int)(info)) & 0xff)
+#define MAKE_DESCRIPTOR(client, port) ((void*)((((size_t)client) << 8) | (port)))
+#define GET_DESCRIPTOR_CLIENT(info) ((((size_t)(info)) >> 8) & 0xff)
+#define GET_DESCRIPTOR_PORT(info) (((size_t)(info)) & 0xff)
 
 #define BYTE unsigned char
 
@@ -193,6 +193,7 @@ static PmError alsa_write_byte(PmInternal *midi, unsigned char byte,
     snd_seq_event_t ev;
     int err;
 
+    if (!desc) return pmBadPtr;
     snd_seq_ev_clear(&ev);
     if (snd_midi_event_encode_byte(desc->parser, byte, &ev) == 1) {
         snd_seq_ev_set_dest(&ev, desc->client, desc->port);
@@ -242,8 +243,8 @@ static PmError alsa_out_close(PmInternal *midi)
     alsa_descriptor_type desc = (alsa_descriptor_type) midi->descriptor;
     if (!desc) return pmBadPtr;
 
-    if (pm_hosterror = snd_seq_disconnect_to(seq, desc->this_port, 
-                                             desc->client, desc->port)) {
+    if ((pm_hosterror = snd_seq_disconnect_to(seq, desc->this_port, 
+                                             desc->client, desc->port))) {
         // if there's an error, try to delete the port anyway, but don't
         // change the pm_hosterror value so we retain the first error
         snd_seq_delete_port(seq, desc->this_port);
@@ -332,13 +333,14 @@ static PmError alsa_in_close(PmInternal *midi)
 {
     alsa_descriptor_type desc = (alsa_descriptor_type) midi->descriptor;
     if (!desc) return pmBadPtr;
-    if (pm_hosterror = snd_seq_disconnect_from(seq, desc->this_port, 
-                                               desc->client, desc->port)) {
+    if ((pm_hosterror = snd_seq_disconnect_from(seq, desc->this_port, 
+                                               desc->client, desc->port))) {
         snd_seq_delete_port(seq, desc->this_port); /* try to close port */
     } else {
         pm_hosterror = snd_seq_delete_port(seq, desc->this_port);
     }
     alsa_unuse_queue();
+    midi->descriptor = NULL;
     pm_free(desc);
     if (pm_hosterror) {
         get_alsa_error_text(pm_hosterror_text, PM_HOST_ERROR_MSG_LEN, 
@@ -420,7 +422,7 @@ static PmError alsa_write(PmInternal *midi, PmEvent *buffer, int32_t length)
     }
     if (desc->error < 0) return pmHostError;
 
-    VERBOSE printf("snd_seq_drain_output: 0x%x\n", (unsigned int) seq);
+    VERBOSE printf("snd_seq_drain_output: 0x%zx\n", (size_t) seq);
     desc->error = snd_seq_drain_output(seq);
     if (desc->error < 0) return pmHostError;
 
@@ -433,7 +435,8 @@ static PmError alsa_write(PmInternal *midi, PmEvent *buffer, int32_t length)
 static PmError alsa_write_flush(PmInternal *midi, PmTimestamp timestamp)
 {
     alsa_descriptor_type desc = (alsa_descriptor_type) midi->descriptor;
-    VERBOSE printf("snd_seq_drain_output: 0x%x\n", (unsigned int) seq);
+    if (!desc) return pmBadPtr;
+    VERBOSE printf("snd_seq_drain_output: 0x%zx\n", (size_t) seq);
     desc->error = snd_seq_drain_output(seq);
     if (desc->error < 0) return pmHostError;
 
@@ -448,6 +451,7 @@ static PmError alsa_write_short(PmInternal *midi, PmEvent *event)
     PmMessage msg = event->message;
     int i;
     alsa_descriptor_type desc = (alsa_descriptor_type) midi->descriptor;
+    if (!desc) return pmBadPtr;
     for (i = 0; i < bytes; i++) {
         unsigned char byte = msg;
         VERBOSE printf("sending 0x%x\n", byte);
@@ -481,12 +485,16 @@ static void handle_event(snd_seq_event_t *ev)
 {
     int device_id = ev->dest.port;
     PmInternal *midi = descriptors[device_id].internalDescriptor;
+    /* The device we received events for might have been closed before we
+       processed them. */
+    if (!midi)
+        return;
     PmEvent pm_ev;
     PmTimeProcPtr time_proc = midi->time_proc;
     PmTimestamp timestamp;
 
     /* time stamp should be in ticks, using our queue where 1 tick = 1ms */
-    assert((ev->flags & SND_SEQ_TIME_STAMP_MASK) == SND_SEQ_TIME_STAMP_TICK);
+    if ((ev->flags & SND_SEQ_TIME_STAMP_MASK) != SND_SEQ_TIME_STAMP_TICK) return;
 
     /* if no time_proc, just return "native" ticks (ms) */
     if (time_proc == NULL) {
@@ -606,7 +614,7 @@ static void handle_event(snd_seq_event_t *ev)
     case SND_SEQ_EVENT_SYSEX: {
         const BYTE *ptr = (const BYTE *) ev->data.ext.ptr;
         /* assume there is one sysex byte to process */
-        pm_read_bytes(midi, ptr, ev->data.ext.len, timestamp);
+        pm_read_bytes(midi, (unsigned char*)ptr, ev->data.ext.len, timestamp);
         break;
     }
     }
@@ -650,6 +658,7 @@ static PmError alsa_poll(PmInternal *midi)
 static unsigned int alsa_has_host_error(PmInternal *midi)
 {
     alsa_descriptor_type desc = (alsa_descriptor_type) midi->descriptor;
+    if (!desc) return 0;
     return desc->error;
 }
 
@@ -657,6 +666,7 @@ static unsigned int alsa_has_host_error(PmInternal *midi)
 static void alsa_get_host_error(PmInternal *midi, char *msg, unsigned int len)
 {
     alsa_descriptor_type desc = (alsa_descriptor_type) midi->descriptor;
+    if (!desc) return;
     int err = (pm_hosterror || desc->error);
     get_alsa_error_text(msg, len, err);
 }
diff --git a/porttime/CMakeLists.txt b/porttime/CMakeLists.txt
new file mode 100644
index 0000000..01d67a7
--- /dev/null
+++ b/porttime/CMakeLists.txt
@@ -0,0 +1,13 @@
+if(UNIX)
+  list(APPEND LIBSRC ptlinux)
+  set(PM_NEEDED_LIBS pthread asound)
+  add_library(porttime SHARED \${LIBSRC})
+  set_target_properties(porttime PROPERTIES VERSION "0.0.0" SOVERSION "0")
+  target_link_libraries(porttime \${PM_NEEDED_LIBS})
+  add_library(porttime-static \${LIBSRC})
+  set_target_properties(porttime-static PROPERTIES OUTPUT_NAME "porttime")
+  target_link_libraries(porttime-static \${PM_NEEDED_LIBS})
+  INSTALL(TARGETS porttime porttime-static
+    LIBRARY DESTINATION "\${CMAKE_INSTALL_LIBDIR}"
+    ARCHIVE DESTINATION "\${CMAKE_INSTALL_LIBDIR}")
+endif(UNIX)
EOF

# -----------------------------------------------------------------------------
# Patch to fix crash on 64-bit Windows
# "Please find enclosed a patch on PortMIDI regarding a crash on 64bits
# version of Windows." - Olivier Tristan
# https://www.mail-archive.com/media_api@create.ucsb.edu/msg00513.html

patch -p0 << EOF

Index: pm_win/pmwinmm.c
===================================================================
--- pm_win/pmwinmm.c    (revision 227)
+++ pm_win/pmwinmm.c    (working copy)
@@ -38,11 +38,11 @@

 /* callback routines */
 static void CALLBACK winmm_in_callback(HMIDIIN hMidiIn,
-                                       WORD wMsg, DWORD dwInstance, 
-                                       DWORD dwParam1, DWORD dwParam2);
+                                       UINT wMsg, DWORD_PTR dwInstance,
+                                       DWORD_PTR dwParam1, DWORD_PTR dwParam2);
 static void CALLBACK winmm_streamout_callback(HMIDIOUT hmo, UINT wMsg,
-                                              DWORD dwInstance, DWORD dwParam1, 
-                                              DWORD dwParam2);
+                                              DWORD_PTR dwInstance, DWORD_PTR dwParam1,
+                                              DWORD_PTR dwParam2);
 #ifdef USE_SYSEX_BUFFERS
 static void CALLBACK winmm_out_callback(HMIDIOUT hmo, UINT wMsg,
                                         DWORD dwInstance, DWORD dwParam1, 
@@ -666,10 +666,10 @@
 /* Callback function executed via midiInput SW interrupt (via midiInOpen). */
 static void FAR PASCAL winmm_in_callback(
     HMIDIIN hMidiIn,    /* midiInput device Handle */
-    WORD wMsg,          /* midi msg */
-    DWORD dwInstance,   /* application data */
-    DWORD dwParam1,     /* MIDI data */
-    DWORD dwParam2)    /* device timestamp (wrt most recent midiInStart) */
+    UINT wMsg,          /* midi msg */
+    DWORD_PTR dwInstance,   /* application data */
+    DWORD_PTR dwParam1,     /* MIDI data */
+    DWORD_PTR dwParam2) /* device timestamp (wrt most recent midiInStart) */
 {
     static int entry = 0;
     PmInternal *midi = (PmInternal *) dwInstance;
@@ -688,7 +688,6 @@
          * hardware interrupt? -- but I've seen reentrant behavior 
          * using a debugger, so it happens.
          */
-        long new_driver_time;
         EnterCriticalSection(&m->lock);

         /* dwParam1 is MIDI data received, packed into DWORD w/ 1st byte of
@@ -697,8 +696,6 @@
             in [ms] from when midiInStart called.
            each message is expanded to include the status byte */

-        new_driver_time = dwParam2;
-
         if ((dwParam1 & 0x80) == 0) {
             /* not a status byte -- ignore it. This happened running the
                sysex.c test under Win2K with MidiMan USB 1x1 interface,
@@ -709,8 +706,8 @@
             PmEvent event;
             if (midi->time_proc)
                 dwParam2 = (*midi->time_proc)(midi->time_info);
-            event.timestamp = dwParam2;
-            event.message = dwParam1;
+            event.timestamp = (PmTimestamp)dwParam2;
+            event.message = (PmMessage)dwParam1;
             pm_read_short(midi, &event);
         }
         LeaveCriticalSection(&m->lock);
@@ -731,7 +728,7 @@
         /* assume yes and iterate through them */
         while (remaining > 0) {
             unsigned int amt = pm_read_bytes(midi, data + processed, 
-                                             remaining, dwParam2);
+                                             remaining, (PmTimestamp)dwParam2);
             remaining -= amt;
             processed += amt;
         }
@@ -1328,7 +1325,7 @@

 /* winmm_streamout_callback -- unprepare (free) buffer header */
 static void CALLBACK winmm_streamout_callback(HMIDIOUT hmo, UINT wMsg,
-        DWORD dwInstance, DWORD dwParam1, DWORD dwParam2)
+        DWORD_PTR dwInstance, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
 {
     PmInternal *midi = (PmInternal *) dwInstance;
     midiwinmm_type m = (midiwinmm_type) midi->descriptor;
EOF

# -----------------------------------------------------------------------------

if [ "`uname -o`" = "Msys" ]; then
cmake \
-G "MSYS Makefiles" \
-DCMAKE_INSTALL_PREFIX=$PREFIX \
.
else
cmake \
-DCMAKE_INSTALL_PREFIX=$PREFIX \
.
fi
make
make install

if [ "`uname`" = "Darwin" ]; then
echo "Fixing dylib install name"
# install_name_tool -change \
# libportmidi.0.dylib \
# $PREFIX/lib/libportmidi.0.dylib \
# $PREFIX/lib/libportmidi.0.dylib
install_name_tool -id \
$PREFIX/lib/libportmidi.0.dylib \
$PREFIX/lib/libportmidi.0.dylib
fi

touch $INSTALLED
