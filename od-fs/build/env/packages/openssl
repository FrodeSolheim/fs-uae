#!/bin/sh
# --------------------------------------------------------------------------------------------------
set -e
# --------------------------------------------------------------------------------------------------

"$BUILD_ENV_DIR/packages/zlib"

PACKAGE=openssl-3.5.1
PACKAGE_REVISION=1
CHECKSUM=529043b15cffa5f36077a4d0af83f3de399807181d607441d734196d889b641f

# --------------------------------------------------------------------------------------------------
. "$PACKAGE_PRE"
# --------------------------------------------------------------------------------------------------

"$BUILD_ENV_DIR/scripts/download.py" \
https://github.com/openssl/openssl/releases/download/$PACKAGE/$PACKAGE.tar.gz \
sha256:$CHECKSUM

tar xf "$BUILD_ENV_DIR/_sources/$PACKAGE.tar.gz"
cd $PACKAGE

OPTIONS="shared no-ssl3 no-weak-ssl-ciphers"

# if [ "$SYSTEM_OS_ARCH" = "Linux_i686" ]; then
# Because building in an x86 docker container on x86-64 host OS confuses the config script
# EDIT: Fixed via the use of the linux32 program
# ./Configure linux-x86 $OPTIONS --prefix=$PREFIX --openssldir=$PREFIX --libdir=lib
# else
./config $OPTIONS --prefix=$PREFIX --openssldir=$PREFIX/ssl --libdir=lib 
# fi
make
make install

# After install openssl, wget may link to the new openssl version and fail to download sources
# afterwards due to not having any CA certificates. Working around that. Alternatively, something
# like export SSL_CERT_DIR=/etc/ssl/certs in the environment could also work.
# EDIT: Using --no-check-certificate
# EDIT 2: glib builds scripts may also download ands needs the certificates...
if [ "$SYSTEM_OS" = "Linux" ]; then
cp /etc/ssl/certs/*.* $PREFIX/ssl
fi

# --------------------------------------------------------------------------------------------------
. "$PACKAGE_POST"
# --------------------------------------------------------------------------------------------------
